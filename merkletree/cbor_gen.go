// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package merkletree

import (
	"fmt"
	"io"
	"math"
	"sort"

	cid "github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = math.E
var _ = sort.Sort

var lengthBufProofDataSerialization = []byte{130}

func (t *ProofDataSerialization) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write(lengthBufProofDataSerialization); err != nil {
		return err
	}

	// t.Index (uint64) (uint64)

	if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.Index)); err != nil {
		return err
	}

	// t.Path (merkletree.nodeArray) (struct)
	if err := t.Path.MarshalCBOR(cw); err != nil {
		return err
	}
	return nil
}

func (t *ProofDataSerialization) UnmarshalCBOR(r io.Reader) (err error) {
	*t = ProofDataSerialization{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 2 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Index (uint64) (uint64)

	{

		maj, extra, err = cr.ReadHeader()
		if err != nil {
			return err
		}
		if maj != cbg.MajUnsignedInt {
			return fmt.Errorf("wrong type for uint64 field")
		}
		t.Index = uint64(extra)

	}
	// t.Path (merkletree.nodeArray) (struct)

	{

		if err := t.Path.UnmarshalCBOR(cr); err != nil {
			return xerrors.Errorf("unmarshaling t.Path: %w", err)
		}

	}
	return nil
}
