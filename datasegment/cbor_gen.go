// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package datasegment

import (
	"fmt"
	"io"
	"math"
	"sort"

	cid "github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = math.E
var _ = sort.Sort

var lengthBufInclusionProof = []byte{130}

func (t *InclusionProof) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write(lengthBufInclusionProof); err != nil {
		return err
	}

	// t.ProofSubtree (merkletree.ProofData) (struct)
	if err := t.ProofSubtree.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.ProofDS (merkletree.ProofData) (struct)
	if err := t.ProofDS.MarshalCBOR(cw); err != nil {
		return err
	}
	return nil
}

func (t *InclusionProof) UnmarshalCBOR(r io.Reader) (err error) {
	*t = InclusionProof{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 2 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.ProofSubtree (merkletree.ProofData) (struct)

	{

		if err := t.ProofSubtree.UnmarshalCBOR(cr); err != nil {
			return xerrors.Errorf("unmarshaling t.ProofSubtree: %w", err)
		}

	}
	// t.ProofDS (merkletree.ProofData) (struct)

	{

		if err := t.ProofDS.UnmarshalCBOR(cr); err != nil {
			return xerrors.Errorf("unmarshaling t.ProofDS: %w", err)
		}

	}
	return nil
}

var lengthBufInclusionAuxData = []byte{130}

func (t *InclusionAuxData) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write(lengthBufInclusionAuxData); err != nil {
		return err
	}

	// t.CommPa (cid.Cid) (struct)

	if err := cbg.WriteCid(cw, t.CommPa); err != nil {
		return xerrors.Errorf("failed to write cid field t.CommPa: %w", err)
	}

	// t.SizePa (uint64) (uint64)

	if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.SizePa)); err != nil {
		return err
	}

	return nil
}

func (t *InclusionAuxData) UnmarshalCBOR(r io.Reader) (err error) {
	*t = InclusionAuxData{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 2 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.CommPa (cid.Cid) (struct)

	{

		c, err := cbg.ReadCid(cr)
		if err != nil {
			return xerrors.Errorf("failed to read cid field t.CommPa: %w", err)
		}

		t.CommPa = c

	}
	// t.SizePa (uint64) (uint64)

	{

		maj, extra, err = cr.ReadHeader()
		if err != nil {
			return err
		}
		if maj != cbg.MajUnsignedInt {
			return fmt.Errorf("wrong type for uint64 field")
		}

	}
	return nil
}

var lengthBufInclusionVerifierData = []byte{130}

func (t *InclusionVerifierData) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write(lengthBufInclusionVerifierData); err != nil {
		return err
	}

	// t.CommPc (cid.Cid) (struct)

	if err := cbg.WriteCid(cw, t.CommPc); err != nil {
		return xerrors.Errorf("failed to write cid field t.CommPc: %w", err)
	}

	// t.SizePc (uint64) (uint64)

	if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.SizePc)); err != nil {
		return err
	}

	return nil
}

func (t *InclusionVerifierData) UnmarshalCBOR(r io.Reader) (err error) {
	*t = InclusionVerifierData{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 2 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.CommPc (cid.Cid) (struct)

	{

		c, err := cbg.ReadCid(cr)
		if err != nil {
			return xerrors.Errorf("failed to read cid field t.CommPc: %w", err)
		}

		t.CommPc = c

	}
	// t.SizePc (uint64) (uint64)

	{

		maj, extra, err = cr.ReadHeader()
		if err != nil {
			return err
		}
		if maj != cbg.MajUnsignedInt {
			return fmt.Errorf("wrong type for uint64 field")
		}

	}
	return nil
}
